# NAME

Dist::Zilla::PluginBundle::Author::RWSTAUNER - RWSTAUNER's Dist::Zilla config

# VERSION

version 3.202

# SYNOPSIS

    # dist.ini

    [@Author::RWSTAUNER]

# DESCRIPTION

This is an Author
[Dist::Zilla::PluginBundle](http://search.cpan.org/perldoc?Dist::Zilla::Role::PluginBundle::Easy)
that I use for building my dists.

This Bundle was heavily influenced by the bundles of
[RJBS](http://search.cpan.org/perldoc?Dist::Zilla::PluginBundle::RJBS) and
[DAGOLDEN](http://search.cpan.org/perldoc?Dist::Zilla::PluginBundle::DAGOLDEN).

# CONFIGURATION

Possible options and their default values:

    auto_prereqs   = 1  ; enable AutoPrereqs
    builder        = eumm ; or 'mb' or 'both'
    disable_tests  =    ; corresponds to @TestingMania.disable
    fake_release   = 0  ; if true will use FakeRelease instead of 'releaser'
    install_command = cpanm -v -i . (passed to InstallRelease)
    is_task        = 0  ; set to true to use TaskWeaver instead of PodWeaver
    placeholder_comments = 0 ; use '# VERSION' and '# AUTHORITY' comments
    releaser       = UploadToCPAN
    skip_plugins   =    ; default empty; a regexp of plugin names to exclude
    skip_prereqs   =    ; default empty; corresponds to AutoPrereqs.skip
    weaver_config  = @Author::RWSTAUNER

The `fake_release` option also respects `$ENV{DZIL_FAKERELEASE}`.

The `release` option can be set to an alternate releaser plugin
or to an empty string to disable adding a releaser.
This can make it easier to include a plugin that requires configuration
by just ignoring the default releaser and including your own normally.

__NOTE__:
This bundle consumes [Dist::Zilla::Role::PluginBundle::Config::Slicer](http://search.cpan.org/perldoc?Dist::Zilla::Role::PluginBundle::Config::Slicer)
so you can also specify attributes for any of the bundled plugins.
The option should be the plugin name and the attribute separated by a dot:

    [@Author::RWSTAUNER]
    AutoPrereqs.skip = Bad::Module

__Note__ that this is different than

    [@Author::RWSTAUNER]
    [AutoPrereqs]
    skip = Bad::Module

which will load the plugin a second time.
The first example actually alters the plugin configuration
as it is included by the Bundle.

See ["CONFIGURATION SYNTAX" in Config::MVP::Slicer](http://search.cpan.org/perldoc?Config::MVP::Slicer#CONFIGURATION SYNTAX) for more information.

If your situation is more complicated you can use the `skip_plugins`
attribute to have the Bundle ignore that plugin
and then you can add it yourself:

    [MetaNoIndex]
    directory = one-dir
    directory = another-dir
    [@Author::RWSTAUNER]
    skip_plugins = MetaNoIndex

# EQUIVALENT `dist.ini`

This bundle is roughly equivalent to:

    [Git::NextVersion]      ; autoincrement version from last tag

    ; choose files to include (dzil core [@Basic])
    [GatherDir]             ; everything under top dir
    [PruneCruft]            ; default stuff to skip
    [ManifestSkip]          ; custom stuff to skip

    ; munge files
    [Authority]             ; inject $AUTHORITY into modules
    do_metadata = 1         ; default
    [NextRelease]           ; simplify maintenance of Changes file
    ; use W3CDTF format for release timestamps (for unambiguous dates)
    time_zone = UTC
    format    = %-9v %{yyyy-MM-dd'T'HH:mm:ss'Z'}d
    [PkgVersion]            ; inject $VERSION (use OurPkgVersion if 'placeholder_comments')
    [Prepender]             ; add header to source code files

    [PodWeaver]             ; munge POD in all modules
    config_plugin = @Author::RWSTAUNER
    ; 'weaver_config' can be set to an alternate Bundle
    ; set 'is_task = 1' to use TaskWeaver instead

    ; generate files
    [License]               ; generate distribution files (dzil core [@Basic])
    [ReadmeMarkdownFromPod] ; generate markdown from main_module pod
    [CopyReadmeFromBuild]   ; copy it to root dir for github repo

    ; metadata
    [Bugtracker]            ; include bugtracker URL and email address (uses RT)
    [Repository]            ; determine git information (if -e ".git")
    [GithubMeta]            ; overrides [Repository] if repository is on github

    [AutoPrereqs]
    ; disable with 'auto_prereqs = 0'

    [MetaNoIndex]           ; encourage CPAN not to index:
    directory = corpus
    directory = examples
    directory = inc
    directory = share
    directory = t
    directory = xt
    namespace = Local
    namespace = t::lib
    package   = DB

    [MetaProvides::Package] ; describe packages included in the dist
    meta_noindex = 1        ; ignore things excluded by above MetaNoIndex

    [MinimumPerl]           ; automatically determine Perl version required

    [MetaConfig]            ; include Dist::Zilla info in distmeta (dzil core)
    [MetaYAML]              ; include META.yml (v1.4) (dzil core [@Basic])
    [MetaJSON]              ; include META.json (v2) (more info than META.yml)

    [Prereqs / TestRequires]
    Test::More = 0.96       ; require recent Test::More (including subtests)

    [ExtraTests]            ; build system (dzil core [@Basic])
    [ExecDir]               ; include 'bin/*' as executables
    [ShareDir]              ; include 'share/' for File::ShareDir

    [MakeMaker]             ; create Makefile.PL (if builder == 'eumm' (default))
    ; [ModuleBuild]         ; create Build.PL (if builder == 'mb')
    ; [DualBuilders]        ; only require one of the above two (prefer 'build') (if both)

    ; generate t/ and xt/ tests
    [ReportVersions::Tiny]  ; show module versions used in test reports
    [@TestingMania]         ; Lots of dist tests
    [Test::PodSpelling]     ; spell check POD (if installed)

    [Manifest]              ; build MANIFEST file (dzil core [@Basic])

    ; actions for releasing the distribution (dzil core [@Basic])
    [CheckExtraTests]       ; xt/
    [CheckChangesHasContent]
    [TestRelease]           ; run tests before releasing

    [@Git]                  ; use Git bundle to commit/tag/push after releasing
    allow_dirty = Changes README.mkdn

    [ConfirmRelease]        ; are you sure?
    [UploadToCPAN]
    ; see CONFIGURATION for alternate Release plugin configuration options

    [InstallRelease]        ; install the new dist (using 'install_command')

# SEE ALSO

- [Dist::Zilla](http://search.cpan.org/perldoc?Dist::Zilla)
- [Dist::Zilla::Role::PluginBundle::Easy](http://search.cpan.org/perldoc?Dist::Zilla::Role::PluginBundle::Easy)
- [Dist::Zilla::Role::PluginBundle::Config::Slicer](http://search.cpan.org/perldoc?Dist::Zilla::Role::PluginBundle::Config::Slicer)
- [Pod::Weaver](http://search.cpan.org/perldoc?Pod::Weaver)

# SUPPORT

## Perldoc

You can find documentation for this module with the perldoc command.

    perldoc Dist::Zilla::PluginBundle::Author::RWSTAUNER

## Websites

The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.

- Search CPAN

The default CPAN search engine, useful to view POD in HTML format.

[http://search.cpan.org/dist/Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://search.cpan.org/dist/Dist-Zilla-PluginBundle-Author-RWSTAUNER)

- RT: CPAN's Bug Tracker

The RT ( Request Tracker ) website is the default bug/issue tracking system for CPAN.

[http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist-Zilla-PluginBundle-Author-RWSTAUNER)

- CPAN Ratings

The CPAN Ratings is a website that allows community ratings and reviews of Perl modules.

[http://cpanratings.perl.org/d/Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://cpanratings.perl.org/d/Dist-Zilla-PluginBundle-Author-RWSTAUNER)

- CPAN Testers

The CPAN Testers is a network of smokers who run automated tests on uploaded CPAN distributions.

[http://www.cpantesters.org/distro/D/Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://www.cpantesters.org/distro/D/Dist-Zilla-PluginBundle-Author-RWSTAUNER)

- CPAN Testers Matrix

The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.

[http://matrix.cpantesters.org/?dist=Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://matrix.cpantesters.org/?dist=Dist-Zilla-PluginBundle-Author-RWSTAUNER)

- CPAN Testers Dependencies

The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.

[http://deps.cpantesters.org/?module=Dist::Zilla::PluginBundle::Author::RWSTAUNER](http://deps.cpantesters.org/?module=Dist::Zilla::PluginBundle::Author::RWSTAUNER)

## Bugs / Feature Requests

Please report any bugs or feature requests by email to `bug-dist-zilla-pluginbundle-author-rwstauner at rt.cpan.org`, or through
the web interface at [http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dist-Zilla-PluginBundle-Author-RWSTAUNER](http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dist-Zilla-PluginBundle-Author-RWSTAUNER). You will be automatically notified of any
progress on the request by the system.

## Source Code



[https://github.com/rwstauner/Dist-Zilla-PluginBundle-Author-RWSTAUNER](https://github.com/rwstauner/Dist-Zilla-PluginBundle-Author-RWSTAUNER)

    git clone https://github.com/rwstauner/Dist-Zilla-PluginBundle-Author-RWSTAUNER.git

# AUTHOR

Randy Stauner <rwstauner@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2010 by Randy Stauner.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.